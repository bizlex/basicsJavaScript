//1. Привет, мир!
// alert('Hello World2!') 

//2. Структура кода
// alert('Hello'); alert('friend')
// same
// alert('Hello') 
// alert('friend')
// alert(3+
// 1
// +2)
// [1,2].forEach(alert)
// alert("Error");
// [1, 2].forEach(alert)

//3. Строгий режим — "use strict"
//В начале скрипта писать "use strict", чтобы работали современные фичи языка
//Если используешь классы и модули -- строгий режим сам включается

//4. Переменные
// let message;
// message = 'Hello!';
// message = 'World!'; //change data
// alert(message);

// let hello = 'Hello World!';
// message = hello; // copy data
// alert(message);
// alert(hello);

// let 1a; //can't
// let $; //can
// let _; //can

// let apple;
// let Apple; //different variable

//tasks

//1
// let name = 'Джон';
// let admin;
// admin = name;
// alert(admin);

//2
// let planetEarth;
// let currentUser;

//3
//можно использовать заглавные буквы для константы const BIRTHDAY = '18.04.1982'; 
//(так как они известна до выполения кода). А для const AGE = someCode(BIRTHDAY); нет, так как код вычисляется

//5. Типы данных
// 8 basic data types
//«динамически типизированными». Это значит, что типы данных есть, но переменные не привязаны ни к одному из них.
// Не будет ошибкой
// let message = "hello";
// message = 123456;

// 1 -- Number

// let n = 123;
// n = 12.345;
// Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.
// alert( 1 / 0 ); // Infinity
// alert( Infinity ); // Infinity
// NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции
// alert( "не число" / 2 ); // NaN, такое деление является ошибкой
// Если где-то в математическом выражении есть NaN, то результатом вычислений с его участием будет NaN.
// alert( "не число" / 2 + 5 ); // NaN

// 2 -- bigInt
//тип «number» не может содержать числа больше, чем (253-1) (т. е. 9007199254740991), 
//или меньше, чем -(253-1) для отрицательных чисел.

// символ "n" в конце означает, что это BigInt
// const bigInt = 1234567890123456789012345678901234567890n;

// 3 -- String

// Двойные кавычки: "Привет".
// Одинарные кавычки: 'Привет'.
// Обратные кавычки: `Привет`.

// 4 -- Boolean
// может принимать только два значения: true (истина) и false (ложь)

// 5 -- null
//Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».
// let age = null; // значение переменной age неизвестно.

// 6 -- undefined
// означает, что «значение не было присвоено».
// let age;
// alert(age); // выведет "undefined"

// 7 -- object
// В объектах же хранят коллекции данных или более сложные структуры.

// 8 -- symbol
// используется для создания уникальных идентификаторов в объектах

// tasks

// 1
// let name = "Ilya";
// alert( `hello ${1}` ); // hello 1
// alert( `hello ${"name"}` ); // hello name
// alert( `hello ${name}` ); // hello Ilya  


//6. Взаимодействие: alert, prompt, confirm

// alert("Hello");
//показывает сообщение и ждёт, пока пользователь нажмёт кнопку «ОК».

//result = prompt(title, [default]);
// код отобразит модальное окно с текстом, полем для ввода текста и кнопками OK/Отмена.
// title Текст для отображения в окне.
// default лучше указывать хотя бы так ('') для EI
// Необязательный второй параметр, который устанавливает начальное значение в поле для текста в окне.

// let title = 'Hi!'
// result = prompt(title, 'User');

//confirm
//result = confirm(question);
// Функция confirm отображает модальное окно с текстом вопроса question и двумя кнопками: OK и Отмена.
// Результат – true, если нажата кнопка OK. В других случаях – false.
// let result = confirm('How old are you?');

//Все эти методы являются модальными: останавливают выполнение скриптов и не позволяют пользователю взаимодействовать
// с остальной частью страницы до тех пор, пока окно не будет закрыто.

//tasks

//1
// let question = prompt('What is your name?', '');
// alert(`Answer: ${question}`);

//7. Преобразование типов

//Строковое преобразование
// Например, alert(value) преобразует значение к строке.
// Также мы можем использовать функцию String(value), чтобы преобразовать значение к строке

// let value = true;
// alert(typeof value); // boolean
// value = String(value); // теперь value это строка "true"
// alert(typeof value); // string

// Численное преобразование
// alert( "6" / "2" ); // 3, строки преобразуются в числа

// Мы можем использовать функцию Number(value), чтобы явно преобразовать value к числу
// let str = "123";
// alert(typeof str); // string
// let num = Number(str); // становится числом 123
// alert(typeof num); // number

// Правила численного преобразования:
// undefined	    NaN
// null	            0
// true / false	    1 / 0
// string	        Пробельные символы по краям обрезаются. Далее, если остаётся пустая строка, то получаем 0, 
//                  иначе из непустой строки «считывается» число. При ошибке результат NaN.

// Логическое преобразование
// Правило преобразования:
// 0, null, undefined, NaN, ""	    false
// любое другое значение	        true

// alert( Boolean(1) ); // true
// alert( Boolean(0) ); // false

// alert( Boolean("Привет!") ); // true
// alert( Boolean("") ); // false

// alert( Boolean("0") ); // true
// alert( Boolean(" ") ); // пробел это тоже true (любая непустая строка это true)

//8. Базовые операторы, математика
// Операнд – то, к чему применяется оператор. 
// Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2
// Унарным называется оператор, который применяется к одному операнду.
// x = -x
// Бинарным называется оператор, который применяется к двум операндам
// x = b - a

// Результат a % b – это остаток от целочисленного деления a на b.
// В выражении a ** b оператор возведения в степень умножает a на само себя b раз.
// квадратный корень является возведением в степень 1/2:
// alert( 4 ** (1/2) ); // 2 (степень 1/2 эквивалентна взятию квадратного корня)

// Сложение и преобразование строк — это особенность бинарного плюса +. 
// Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.

// alert( 6 - '2' ); // 4, '2' приводится к числу
// alert( '6' / '2' ); // 3, оба операнда приводятся к числам












